{
    "parser": "@typescript-eslint/parser",
    "extends": [
        "eslint:recommended",
        "plugin:@typescript-eslint/recommended",
        "next/core-web-vitals"
    ],
    "plugins": ["@typescript-eslint"],
    "rules": {
        "no-restricted-syntax": [
            "error", {
                "message": "Do not use the setInterval() function directly. Instead, use the addInterval() function available in src/cleanup.ts.",
                "selector": "CallExpression[callee.name='setInterval']"
            }, {
                "message": "Consider using the addLongTimeout() function available in src/cleanup.ts instead if the timeout is long and infrequent. If you've confirmed this is not the case, please mark line with eslint-disable-line.",
                "selector": "CallExpression[callee.name='setTimeout']"
            }
        ],
        "require-await": 2,
        "@typescript-eslint/no-unused-vars": [
            "warn",
            { "varsIgnorePattern": "_" }
        ],
        "@typescript-eslint/no-misused-promises": [
            "error",
            { "checksVoidReturn": false }
        ],
        "@typescript-eslint/ban-types": [
            "warn", {
                "types": { "Function": false },
                "extendDefaults": true
            }
        ],
        "@typescript-eslint/no-explicit-any": 0,
        "@typescript-eslint/await-thenable": 1,
        "@typescript-eslint/no-unnecessary-condition": [
            "error", {
                "allowConstantLoopConditions": true
            }
        ],
        "no-return-await": "warn",
        "no-constant-condition": [
            "error", {
                "checkLoops": false
            }
        ],
        "prefer-const": "warn"
    },
    "parserOptions": {
        "project": ["./tsconfig.json"] // Specify it only for TypeScript files
    }
}
